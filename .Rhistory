dist.units, model = "WGS84")
rightArrow <- gcDestination(lon = onTop[1,"long"], lat = onTop[1,"lat"], bearing = 135, dist = length/5, dist.units =
dist.units, model = "WGS84")
res <- rbind(
cbind(x = lon, y = lat, xend = onTop[1,"long"], yend = onTop[1,"lat"]),
cbind(x = leftArrow[1,"long"], y = leftArrow[1,"lat"], xend = onTop[1,"long"], yend = onTop[1,"lat"]),
cbind(x = rightArrow[1,"long"], y = rightArrow[1,"lat"], xend = onTop[1,"long"], yend = onTop[1,"lat"]))
res <- as.data.frame(res, stringsAsFactors = FALSE)
# Coordinates from which "N" will be plotted
coordsN <- cbind(x = lon, y = (lat + onTop[1,"lat"])/2)
return(list(res = res, coordsN = coordsN)) } The last function enables the user to draw the elements:
#
# Result #
#--------#
# This function enables to draw a scale bar on a ggplot object, and optionally an orientation arrow #
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distanceLon : length of each rectangle ;
# distanceLat : width of each rectangle ;
# distanceLegend : distance between rectangles and legend texts ;
# dist.units : units of distance "km" (kilometers) (by default), "nm" (nautical miles), "mi" (statute miles) ;
# rec.fill, rec2.fill : filling colour of the rectangles (default to white, and black, resp.);
# rec.colour, rec2.colour : colour of the rectangles (default to black for both);
# legend.colour : legend colour (default to black);
# legend.size : legend size (default to 3);
# orientation : (boolean) if TRUE (default), adds an orientation arrow to the plot ;
# arrow.length : length of the arrow (default to 500 km) ;
# arrow.distance : distance between the scale bar and the bottom of the arrow (default to 300 km) ;
# arrow.North.size : size of the "N" letter (default to 6). scaleBar <- function(lon, lat, distanceLon, distanceLat, distanceLegend,
dist.unit = "km", rec.fill = "white", rec.colour = "black", rec2.fill
= "black", rec2.colour = "black", legend.colour = "black", legend.size = 3, orientation = TRUE, arrow.length = 500, arrow.distance = 300, arrow.North.size = 6){
laScaleBar <- createScaleBar(lon = lon, lat = lat, distanceLon = distanceLon, distanceLat = distanceLat, distanceLegend =
distanceLegend, dist.unit = dist.unit)
# First rectangle
rectangle1 <- geom_polygon(data = laScaleBar$rectangle, aes(x = lon, y = lat), fill = rec.fill, colour = rec.colour)
# Second rectangle
rectangle2 <- geom_polygon(data = laScaleBar$rectangle2, aes(x = lon, y = lat), fill = rec2.fill, colour = rec2.colour)
# Legend
scaleBarLegend <- annotate("text", label = paste(laScaleBar$legend[,"text"], dist.unit, sep=""), x =
laScaleBar$legend[,"long"], y = laScaleBar$legend[,"lat"], size =
legend.size, colour = legend.colour)
res <- list(rectangle1, rectangle2, scaleBarLegend)
if(orientation){# Add an arrow pointing North
coordsArrow <- createOrientationArrow(scaleBar = laScaleBar, length = arrow.length, distance = arrow.distance, dist.unit =
dist.unit)
arrow <- list(geom_segment(data = coordsArrow$res, aes(x = x, y = y, xend = xend, yend = yend)), annotate("text", label = "N", x =
coordsArrow$coordsN[1,"x"], y = coordsArrow$coordsN[1,"y"], size =
arrow.North.size, colour = "black"))
res <- c(res, arrow)
}
return(res) }
library(maps)
library(maptools)
library(ggplot2)
library(grid)
#Then, we need a function to get the scale bar coordinates:
#
# Result #
#--------#
# Return a list whose elements are :
#   - rectangle : a data.frame containing the coordinates to draw the first rectangle ;
#   - rectangle2 : a data.frame containing the coordinates to draw the second rectangle ;
#   - legend : a data.frame containing the coordinates of the legend texts, and the texts as well.
#
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distanceLon : length of each rectangle ;
# distanceLat : width of each rectangle ;
# distanceLegend : distance between rectangles and legend texts ;
# dist.units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles). createScaleBar <-
function(lon,lat,distanceLon,distanceLat,distanceLegend, dist.units =
"km"){
# First rectangle
bottomRight <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distanceLon, dist.units = dist.units, model = "WGS84")
topLeft <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distanceLat, dist.units = dist.units, model = "WGS84")
rectangle <- cbind(lon=c(lon, lon, bottomRight[1,"long"], bottomRight[1,"long"], lon),
lat = c(lat, topLeft[1,"lat"], topLeft[1,"lat"],lat, lat))
rectangle <- data.frame(rectangle, stringsAsFactors = FALSE)
# Second rectangle t right of the first rectangle
bottomRight2 <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distanceLon*2, dist.units = dist.units, model = "WGS84")
rectangle2 <- cbind(lon = c(bottomRight[1,"long"], bottomRight[1,"long"], bottomRight2[1,"long"], bottomRight2[1,"long"],
bottomRight[1,"long"]),
lat=c(lat, topLeft[1,"lat"], topLeft[1,"lat"], lat, lat))
rectangle2 <- data.frame(rectangle2, stringsAsFactors = FALSE)
# Now let's deal with the text
onTop <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distanceLegend, dist.units = dist.units, model = "WGS84")
onTop2 <- onTop3 <- onTop
onTop2[1,"long"] <- bottomRight[1,"long"]
onTop3[1,"long"] <- bottomRight2[1,"long"]
legend <- rbind(onTop, onTop2, onTop3)
legend <- data.frame(cbind(legend, text = c(0, distanceLon, distanceLon*2)), stringsAsFactors = FALSE, row.names = NULL)
return(list(rectangle = rectangle, rectangle2 = rectangle2, legend = legend)) } We also need a function to obtain the coordinates of the North arrow:
#
# Result #
#--------#
# Returns a list containing :
#   - res : coordinates to draw an arrow ;
#   - coordinates of the middle of the arrow (where the "N" will be plotted).
#
# Arguments : #
#-------------#
# scaleBar : result of createScaleBar() ;
# length : desired length of the arrow ;
# distance : distance between legend rectangles and the bottom of the arrow ;
# dist.units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles). createOrientationArrow <-
function(scaleBar, length, distance = 1, dist.units = "km"){
lon <- scaleBar$rectangle2[1,1]
lat <- scaleBar$rectangle2[1,2]
# Bottom point of the arrow
begPoint <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance, dist.units = dist.units, model = "WGS84")
lon <- begPoint[1,"long"]
lat <- begPoint[1,"lat"]
# Let us create the endpoint
onTop <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = length, dist.units = dist.units, model = "WGS84")
leftArrow <- gcDestination(lon = onTop[1,"long"], lat = onTop[1,"lat"], bearing = 225, dist = length/5, dist.units =
dist.units, model = "WGS84")
rightArrow <- gcDestination(lon = onTop[1,"long"], lat = onTop[1,"lat"], bearing = 135, dist = length/5, dist.units =
dist.units, model = "WGS84")
res <- rbind(
cbind(x = lon, y = lat, xend = onTop[1,"long"], yend = onTop[1,"lat"]),
cbind(x = leftArrow[1,"long"], y = leftArrow[1,"lat"], xend = onTop[1,"long"], yend = onTop[1,"lat"]),
cbind(x = rightArrow[1,"long"], y = rightArrow[1,"lat"], xend = onTop[1,"long"], yend = onTop[1,"lat"]))
res <- as.data.frame(res, stringsAsFactors = FALSE)
# Coordinates from which "N" will be plotted
coordsN <- cbind(x = lon, y = (lat + onTop[1,"lat"])/2)
return(list(res = res, coordsN = coordsN)) } The last function enables the user to draw the elements:
#
# Result #
#--------#
# This function enables to draw a scale bar on a ggplot object, and optionally an orientation arrow #
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distanceLon : length of each rectangle ;
# distanceLat : width of each rectangle ;
# distanceLegend : distance between rectangles and legend texts ;
# dist.units : units of distance "km" (kilometers) (by default), "nm" (nautical miles), "mi" (statute miles) ;
# rec.fill, rec2.fill : filling colour of the rectangles (default to white, and black, resp.);
# rec.colour, rec2.colour : colour of the rectangles (default to black for both);
# legend.colour : legend colour (default to black);
# legend.size : legend size (default to 3);
# orientation : (boolean) if TRUE (default), adds an orientation arrow to the plot ;
# arrow.length : length of the arrow (default to 500 km) ;
# arrow.distance : distance between the scale bar and the bottom of the arrow (default to 300 km) ;
# arrow.North.size : size of the "N" letter (default to 6). scaleBar <- function(lon, lat, distanceLon, distanceLat, distanceLegend,
dist.unit = "km", rec.fill = "white", rec.colour = "black", rec2.fill
= "black", rec2.colour = "black", legend.colour = "black", legend.size = 3, orientation = TRUE, arrow.length = 500, arrow.distance = 300, arrow.North.size = 6){
laScaleBar <- createScaleBar(lon = lon, lat = lat, distanceLon = distanceLon, distanceLat = distanceLat, distanceLegend =
distanceLegend, dist.unit = dist.unit)
# First rectangle
rectangle1 <- geom_polygon(data = laScaleBar$rectangle, aes(x = lon, y = lat), fill = rec.fill, colour = rec.colour)
# Second rectangle
rectangle2 <- geom_polygon(data = laScaleBar$rectangle2, aes(x = lon, y = lat), fill = rec2.fill, colour = rec2.colour)
# Legend
scaleBarLegend <- annotate("text", label = paste(laScaleBar$legend[,"text"], dist.unit, sep=""), x =
laScaleBar$legend[,"long"], y = laScaleBar$legend[,"lat"], size =
legend.size, colour = legend.colour)
res <- list(rectangle1, rectangle2, scaleBarLegend)
if(orientation){# Add an arrow pointing North
coordsArrow <- createOrientationArrow(scaleBar = laScaleBar, length = arrow.length, distance = arrow.distance, dist.unit =
dist.unit)
arrow <- list(geom_segment(data = coordsArrow$res, aes(x = x, y = y, xend = xend, yend = yend)), annotate("text", label = "N", x =
coordsArrow$coordsN[1,"x"], y = coordsArrow$coordsN[1,"y"], size =
arrow.North.size, colour = "black"))
res <- c(res, arrow)
}
return(res) }
install.packages('ggsn')
require(ggsn)
BMSC.map +
blank() +
north(bmsc) +
scalebar(bmsc, dist = 5, dd2km = TRUE, model = 'WGS84')
BMSC.map +
blank() +
north(bmsc) +
scalebar(bmsc, dist = 0.1, dd2km = TRUE, model = 'WGS84')
BMSC.map +
blank() +
north(bmsc)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect)) +
north(bmsc)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect))
print(BMSC.map)
?north
head(bmsc)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect)) +
north()
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect)) +
north()
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect)) +
north(avg)
print(BMSC.map)
head(avg )
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect)) +
north(locations)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect)) +
north(locations)
head(avg)
head(locations)
colnames(locations)[2]<-'long'
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=lon, y=lat, group=transect)) +
geom_text(data=locations, aes(x=lon, y=lat, group=transect, label=transect)) +
north(locations)
source('~/Desktop/MPA-labs/lab1/lab1_learning_R.R', echo=TRUE)
print(BMSC.map)
t's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect)) +
north(locations)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect)) +
north(locations)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect)) +
scalebar(locations, dist = 0.1, dd2km = T, model = 'WGS84') +
north(locations)
print(BMSC.map)
print(BMSC.map)
dat<-read.csv("Lab1/lab1_scotts_forR.csv")
setwd('/Users/jpwrobinson/Documents/git_repos/mpa-bmsc')
dat<-read.csv("Lab1/lab1_scotts_forR.csv")
dat$algae_percent<-as.numeric(as.character(dat$algae_percent))
str(dat)
avg<-aggregate(cbind(star_dens, barn_dens, mussel_dens, algae_stalk,
star_percent, barn_percent, mussel_percent, algae_percent) ~ transect + lat + lon + tidal, dat, mean)
avg
write.csv(avg, "Lab1/scott_class_averaged.csv")
locations<-aggregate(transect ~ lat + lon, dat, unique)
write.csv(locations,'Lab1/scott_class_transect_pts.csv')
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect)) +
scalebar(locations, dist = 0.1, dd2km = T, model = 'WGS84')
#north(locations)
print(BMSC.map)
max(avg$long)
max(avg$lon)
locations
colnames(locations)[2]<-'long'
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
scalebar(locations, dist = 0.1, dd2km = T, model = 'WGS84')
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect)) +
#north(locations)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect)) +
scalebar(locations, dist = 0.01, dd2km = T, model = 'WGS84')
print(BMSC.map)
?scalebar
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect)) +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84')
#north(locations)
print(BMSC.map)
colnames(locations)[locations$long]
colnames(locations)['long']
colnames(locations)[colnames(locations)=='long']
colnames(locations)[colnames(locations)=='long']<-'lon'
locations
colnames(locations)[colnames(locations)=='lon']<-'long'
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect)) +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84')
#north(locations)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84')
#north(locations)
print(BMSC.map)
R.Version()
setwd('/Users/jpwrobinson/Documents/git_repos/mpa-bmsc')
## aggregating data across transects
dat<-read.csv("Lab1/lab1_scotts_forR.csv")
dat$algae_percent<-as.numeric(as.character(dat$algae_percent))
str(dat)
avg<-aggregate(cbind(star_dens, barn_dens, mussel_dens, algae_stalk,
star_percent, barn_percent, mussel_percent, algae_percent) ~ transect + lat + lon + tidal, dat, mean)
avg
write.csv(avg, "Lab1/scott_class_averaged.csv")
locations<-aggregate(transect ~ lat + lon, dat, unique)
write.csv(locations,'Lab1/scott_class_transect_pts.csv')
dat<-read.csv("Lab2/lab2_ross_day1.csv")
head(dat)
dat1<-gather(dat,abundance ,species, -team, -observer, -transect, -lat, -lon, -N_algae, -N-seastar, -N_total)
require(tidyr)
dat1<-gather(dat,abundance ,species, -team, -observer, -transect, -lat, -lon, -N_algae, -N-seastar, -N_total)
head(dat1)
dat1<-gather(dat,abundance ,species, -team, -observer, -transect, -lat, -lon,
-N_algae, -N_seastar, -N_total)
head(dat1)
dat1<-gather(dat,species ,abundance, -team, -observer, -transect, -lat, -lon,
-N_algae, -N_seastar, -N_total)
dat1<-dat1[!colnames(dat1)%in%c("N_algae", "N_seastar", "N_total"),]
dat1
ggplot(dat1, aes(transect, species, col=observer)) + geom_line() + facet_wrap(~transect)
View(dat1)
ggplot(dat1, aes(observer, species, col=observer)) + geom_line() + facet_wrap(~transect)
ggplot(dat1, aes(abundance, species, col=observer)) + geom_line() + facet_wrap(~transect)
ggplot(dat1, aes( species,abundance, col=observer)) + geom_line() + facet_wrap(~transect)
ggplot(dat1, aes( species,abundance, col=observer)) + geom_point() + facet_wrap(~transect)
ggplot(dat1, aes( species,abundance, col=factor(observer))) + geom_point() + facet_wrap(~transect)
theme_set(theme_bw())
ggplot(dat1, aes( species,abundance, col=factor(observer))) + geom_point() + facet_wrap(~transect)
ggplot(dat1, aes(species, abundance, col=transect)) +
geom_boxplot()
ggplot(dat1, aes(species, abundance, fill=transect)) +
geom_boxplot()
head(dat1)
ggplot(dat1, aes(species, abundance, fill=factor(transect))) +
geom_boxplot()
by observer - observer bias?
ggplot(dat1, aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(~transect)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1742, y = 48.83455, xend = -125.1742, yend = 48.83460), arrow = arrow(length = unit(0.5, "cm")))
#north(locations)
print(BMSC.map)
colnames(locations)[colnames(locations)=='lon']<-'long'
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1742, y = 48.83455, xend = -125.1742, yend = 48.83460), arrow = arrow(length = unit(0.5, "cm")))
#north(locations)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1742, y = 48.83455, xend = -125.1742, yend = 48.83460),col="white", arrow = arrow(length = unit(0.5, "cm")))
#north(locations)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1472, y = 48.83455, xend = -125.1472, yend = 48.83460),col="white", arrow = arrow(length = unit(0.5, "cm")))
#north(locations)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1465, y = 48.83452, xend = -125.1465, yend = 48.83460),col="white", arrow = arrow(length = unit(0.5, "cm")))
#north(locations)
print(BMSC.map)
al community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1465, y = 48.83452, xend = -125.1465, yend = 48.83460),col="white", arrow = arrow(length = unit(0.5, "cm"))) +
annotate("text", x=-125.1465, y=48.83453, label="N")
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1465, y = 48.83452, xend = -125.1465, yend = 48.83460),col="white", arrow = arrow(length = unit(0.5, "cm"))) +
annotate("text", x=-125.1465, y=48.83453, label="N")
#north(locations)
print(BMSC.map)
BMSC.map<-ggmap(bmsc)+labs(title="Scott's Bay intertidal community") +
geom_point(data = avg, aes(x =lon, y= lat,size = barn_dens, col=factor(transect)), alpha=0.5) +
geom_line(data=locations, aes(x=long, y=lat, group=transect), col='white') +
geom_text(data=locations, aes(x=long, y=lat, group=transect, label=transect), col='white') +
scalebar(locations, dist = 0.02, dd2km = T, model = 'WGS84') +
geom_segment(aes(x = -125.1465, y = 48.83452, xend = -125.1465, yend = 48.83460),col="white", arrow = arrow(length = unit(0.5, "cm"))) +
annotate("text", x=-125.1465, y=48.83462, label="N", col='white')
#north(locations)
print(BMSC.map)
by observer - observer bias?
ggplot(dat1, aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(~transect)
111190.28709013655/0.0005
111190.28709013655/0.0005/1000
60/100
60*0.6
60*(100/60)
100/60
900*1.667
19*1.667
17*1.667
17*1.667
40*1.667
16*1.667
27*1.667
21*1.667
21*1.667*30
27*1.667*30
16*1.667*30
40*1.667*30
17*1.667*30
19*1.667*30
30*1.667*30
ross<-read.csv('ross-transects-master.csv')
getwd()
ross<-read.csv('lab2/ross-transects-master.csv')
dat1<-gather(ross,species ,abundance,-day, -team, -observer, -transect, -lat, -lon)
head(dat1)
unique(dat1$species )
avg<-aggregate(cbind(leather, pisaster, fucus, sea.potato, bull, giant, sargassum, turkish ) ~ day + transect + team, ross, mean)
avg
avg<-aggregate(cbind(leather, pisaster, fucus, sea.potato, bull, giant, sargassum, turkish ) ~ team + transect + day  , ross, mean)
avg
write.csv(avg, file='ross_average_density.csv')
ggplot(dat1, aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
dat1$bull<-NULL
ggplot(dat1, aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
ggplot(dat1[-dat1$fucus,], aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
ggplot(dat1[!dat1$fucus,], aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
ggplot(dat1[dat1$abundance<500,], aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
ndances by observer - observer bias?
ggplot(dat1, aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
30*16
27*16
21*30
27*30
16*30
27*30
21*30
40*30
ross<-read.csv('lab2/ross-transects-master.csv')
avg<-aggregate(cbind(leather, pisaster, fucus, sea.potato, bull, giant, sargassum, turkish ) ~ team + transect + day  , ross, mean)
write.csv(avg, file='lab2/ross_average_density.csv')
## plot 1 - abundances by observer - observer bias?
ggplot(dat1, aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
dat1<-gather(ross,species ,abundance,-day, -team, -observer, -transect, -lat, -lon)
dat1$bull<-NULL
observer bias?
ggplot(dat1, aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
ggplot(dat1[dat1$abundance<500,], aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
ggplot(dat1[dat1$abundance<500,], aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
ggplot(dat1[dat1$abundance<250,], aes( species,abundance, col=factor(observer))) +
geom_point() +
facet_wrap(day~team)
